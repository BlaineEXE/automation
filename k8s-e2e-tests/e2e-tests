#!/bin/sh

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

ARTIFACTS_PATH=$DIR/results
KUBECONFIG=

USAGE=$(cat <<USAGE
Usage:

  * providing a "kubeconfig"

    -k|--kubeconfig <FILE>   kubeconfig file

Other:

    --artifacts <DIR>        directory where junit XML files are stored
    --log <FILE>             log file

USAGE
)

# logging and utils

log()        { (>&2 echo ">>> [e2e-tests] $@") ; }
warn()       { log "WARNING: $@" ; }
error()      { log "ERROR: $@" ; exit 1 ; }
abort()      { log "FATAL: $@" ; exit 1 ; }
check_file() { [ -f "$1" ] || abort "File $1 doesn't exist!" ; }

# options

while [[ $# > 0 ]] ; do
  case $1 in
    -k|--kubeconfig)
      KUBECONFIG="$(realpath $2)"
      check_file $KUBECONFIG
      shift
      ;;
    --artifacts)
      ARTIFACTS_PATH="$(realpath $2)"
      shift
      ;;
    -h|--help)
      echo "$USAGE"
      exit 0
      ;;
  esac
  shift
done

run_tests() {
    if ! command -v sonobuoy > /dev/null; then
        abort "sonobuoy needs to be installed"
    fi
    sonobuoy gen > sonobuoy-conformance.yaml
    KUBECONFIG=$KUBECONFIG kubectl apply -f sonobuoy-conformance.yaml
    # wait a bit to let the test start
    sleep 10
    while KUBECONFIG=$KUBECONFIG sonobuoy status | grep "Sonobuoy is still running"; do
        sleep 1
    done

    # Create the artifacts path
    mkdir -p $ARTIFACTS_PATH

    # Copy results from the container
    KUBECONFIG=$KUBECONFIG kubectl cp heptio-sonobuoy/sonobuoy:tmp/sonobuoy $ARTIFACTS_PATH
    KUBECONFIG=$KUBECONFIG sonobuoy logs > $ARTIFACTS_PATH/e2e.log
    if KUBECONFIG=$KUBECONFIG sonobuoy status | grep "Sonobuoy has failed"; then
        abort "conformance tests failed"
    fi
}

# checks

if [ -z "$KUBECONFIG" ]; then
  abort "Option -k|--kubeconfig is required"
fi

# main

run_tests

log "Done."
