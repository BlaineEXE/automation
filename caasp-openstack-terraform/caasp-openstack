#!/bin/bash

log()   { echo ">>> $1" ; }
warn()  { log "WARNING: $1" ; }
abort() { log "$1" ; exit 1 ; }

USAGE=$(cat <<USAGE
USAGE:

  Before running caasp-openstack script:

  1. Use openrc.sh OpenStack file and

     # source openrc.sh

    or manually export following variables

  # export OS_AUTH_URL - OpenStack Identity API v3
  # export OS_USER_DOMAIN_NAME - OpenStack Domain Name
  # export OS_PROJECT_NAME - OpenStack Project Name
  # export OS_REGION_NAME - OpenStack Region Name
  # export OS_USERNAME - OpenStack User Name
  # export OS_PASSWORD - OpenStack User Password

  2. Edit openstack.tfvars file and provide following options

  * image_name - CaaSP OpenStack Image Name
  * network_name - OpenStack Private Network
  * admin_size - CaaSP Admin OpenStack Flavour
  * master_size - CaaSP Master OpenStack Flavour
  * worker_size - CaaSP Worker OpenStack Flavour
  * masters - Number of CaaSP Master nodes
  * workers - Number of CaaSP Worker nodes
  * dnsdomain - create a subdomain in an existing designate domain if dnsentry variable is set to 0
  * dnsentry - if set to 1 creates the dnsdomain subdomain if set to 0 it does not create dns entries
  * identifier - name to prefix resources to prevent user collisions in shared environments


  You may optionally specify a different .tfvars file as follows:
  # export TFVARS_FILE="/home/user/my-custom-settings.tfvars"

  3. Run caasp-openstack with following action:

  # caasp-openstack apply - deploy CaaSP application
  # caasp-openstack refresh - refresh CaaSP resources
  # caasp-openstack plan - plan CaaSP update
  # caasp-openstack destroy - cleanup CaaSP installation
  # caasp-openstack output - show CaaSP ip addresses
  # caasp-openstack show - show CaaSP deployment

<<<
USAGE
)

if [ $# -ge 1 ]; then
  case $1 in
    apply|output|show|plan|refresh|destroy)
      COMMAND=$1
      shift
      ;;
    *)
      abort "$USAGE"
      ;;
  esac
else
  abort "$USAGE"
fi

if [ -v $OS_AUTH_URL ] || [ -v $OS_USERNAME ] ; then
  abort "$USAGE"
fi

echo ""
echo "OpenStack endpoint $OS_AUTH_URL"
echo ""

if [ -v $OS_PASSWORD ]; then
  echo "Please enter your OpenStack Password: "
  read -sr OS_PASSWORD_INPUT
  export OS_PASSWORD=$OS_PASSWORD_INPUT
fi

TFVARS_FILE=${TFVARS_FILE:='openstack.tfvars'}

# In environments where we create the internal network, the router needs the external net ID.
# Get it procedurally here to prevent user error from having to input both name and ID.
external_net=$(eval "$(cat "${TFVARS_FILE}" | grep '^external_net =' | tr --delete ' ')" && echo "${external_net}")
external_net_id=$(eval "$(openstack network show --format shell "${external_net}" | grep '^id=')" && echo "${id}")

terraform $COMMAND -var-file="${TFVARS_FILE}" -var external_net_id="${external_net_id}" $@

if [ "$COMMAND" = 'apply' ]; then
  tools/generate-environment.py > environment.json
elif [ "$COMMAND" = 'destroy' ]; then
  rm environment.json
fi
